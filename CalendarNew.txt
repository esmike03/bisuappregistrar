<script>
    function calendarComponent() {
        return {
            currentYear: new Date().getFullYear(),
            currentMonth: new Date().getMonth(),
            selectedDate: null,
            philippineHolidays: [],

            init() {
                this.fetchHolidays();
                this.generateCalendar();
                this.$watch('selectedDate', (value) => {
                    this.$dispatch('date-selected', value);
                });
            },

            async fetchHolidays() {
                try {
                    const response = await fetch('/holidays');
                    const holidays = await response.json();
                    this.philippineHolidays = holidays.map(holiday => new Date(holiday.holiday_date));
                    this.generateCalendar(); // Regenerate calendar after fetching holidays
                } catch (error) {
                    console.error('Error fetching holidays:', error);
                }
            },

            generateCalendar() {
                const calendarElement = this.$refs.calendar;
                const currentDate = new Date(); // Today's date
                const minDisabledDate = new Date(currentDate);
                minDisabledDate.setDate(currentDate.getDate() + 3); // 3 days after today

                const firstDayOfMonth = new Date(this.currentYear, this.currentMonth, 1);
                const daysInMonth = new Date(this.currentYear, this.currentMonth + 1, 0).getDate();

                calendarElement.innerHTML = '';

                const monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August',
                    'September', 'October', 'November', 'December'];
                this.currentMonthName = monthNames[this.currentMonth];

                const firstDayOfWeek = firstDayOfMonth.getDay();

                const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
                daysOfWeek.forEach(day => {
                    const dayElement = document.createElement('div');
                    dayElement.className = 'text-center font-semibold';
                    dayElement.innerText = day;
                    calendarElement.appendChild(dayElement);
                });

                // Add empty slots for days before the first day of the month
                for (let i = 0; i < firstDayOfWeek; i++) {
                    const emptyDayElement = document.createElement('div');
                    calendarElement.appendChild(emptyDayElement);
                }

                // Generate the days of the month
                for (let day = 1; day <= daysInMonth; day++) {
                    const dayElement = document.createElement('div');
                    dayElement.className = 'text-center py-2 border cursor-pointer';
                    dayElement.innerText = day;

                    const dateToCheck = new Date(this.currentYear, this.currentMonth, day);

                    // Disable past dates, next 3 days, weekends, and holidays
                    if (
                        dateToCheck < currentDate ||
                        dateToCheck <= minDisabledDate ||
                        dateToCheck.getDay() === 0 ||
                        dateToCheck.getDay() === 6 ||
                        this.isHoliday(dateToCheck)
                    ) {
                        dayElement.classList.add('disabled-day');
                    }

                    // Highlight the current day
                    if (this.currentYear === currentDate.getFullYear() &&
                        this.currentMonth === currentDate.getMonth() &&
                        day === currentDate.getDate()) {
                        dayElement.classList.add('bg-blue-500', 'text-white');
                    }

                    // Add click event to select a date
                    dayElement.addEventListener('click', () => {
                        if (!dayElement.classList.contains('disabled-day')) {
                            this.selectDate(dayElement, dateToCheck);
                        }
                    });

                    calendarElement.appendChild(dayElement);
                }
            },

            isHoliday(dateToCheck) {
                return this.philippineHolidays.some(holiday =>
                    holiday.getDate() === dateToCheck.getDate() &&
                    holiday.getMonth() === dateToCheck.getMonth() &&
                    holiday.getFullYear() === dateToCheck.getFullYear()
                );
            },

            selectDate(dayElement, date) {
                this.clearSelectedDate();
                const options = {
                    weekday: 'long',
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                };
                this.selectedDate = date.toLocaleDateString(undefined, options);
                dayElement.classList.add('selected-day');
                this.$dispatch('date-selected', this.selectedDate);
            },

            clearSelectedDate() {
                const selectedElements = this.$refs.calendar.querySelectorAll('.selected-day');
                selectedElements.forEach(el => el.classList.remove('selected-day'));
            },

            prevMonth() {
                this.currentMonth--;
                if (this.currentMonth < 0) {
                    this.currentMonth = 11;
                    this.currentYear--;
                }
                this.generateCalendar();
            },

            nextMonth() {
                this.currentMonth++;
                if (this.currentMonth > 11) {
                    this.currentMonth = 0;
                    this.currentYear++;
                }
                this.generateCalendar();
            }
        };
    }
</script>